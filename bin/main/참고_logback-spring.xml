<?xml version="1.0" encoding="UTF-8"?>

<!-- 60초마다 설정 파일의 변경을 확인 하여 변경시 갱신 -->
<configuration scan="true" scanPeriod="60 seconds">

 <!-- 이 곳에 추가할 기능을 넣는다. -->

<!--springProfile 태그를 사용하면 logback 설정파일에서 복수개의 프로파일을 설정할 수 있다.-->
<springProfile name="local">
   <property resource="logback-local.properties"/>
</springProfile>
<springProfile name="dev">
   <property resource="logback-dev.properties"/>
</springProfile>
<springProfile name="prod">
   <property resource="logback-prod.properties"/>
</springProfile>


<!--Environment 내의 프로퍼티들을 개별적으로 설정할 수도 있다.-->
    <springProperty scope="context" name="LOG_LEVEL" source="logging.level.root"/>

    <!-- log file path -->
    <property name="LOG_PATH" value="${log.config.path}"/>
    <!-- log file name -->
    <property name="LOG_FILE_NAME" value="${log.config.filename}"/>
    <!-- err log file name -->
    <property name="ERR_LOG_FILE_NAME" value="err_log"/>
    <!-- pattern -->
    <property name="LOG_PATTERN" value="%-5level %d{yy-MM-dd HH:mm:ss}[%thread] [%logger{0}:%line] - %msg%n"/>
    
 <!-- %-5level : 로그 레벨, -5는 출력의 고정폭 값(5글자)
%msg : - 로그 메시지 (=%message)
${PID:-} : 프로세스 아이디
%d : 로그 기록시간
%p : 로깅 레벨
%F : 로깅이 발생한 프로그램 파일명
%M : 로깅일 발생한 메소드의 명
%l : 로깅이 발생한 호출지의 정보
%L : 로깅이 발생한 호출지의 라인 수
%thread : 현재 Thread 명
%t : 로깅이 발생한 Thread 명
%c : 로깅이 발생한 카테고리
%C : 로깅이 발생한 클래스 명
%m : 로그 메시지
%n : 줄바꿈(new line)
%% : %를 출력
%r : 애플리케이션 시작 이후부터 로깅이 발생한 시점까지의 시간(ms) -->   
  
      <!-- 콘솔에 로그를 남기는 것 -->
    <appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <!-- 위에 PROPERTY로 정의한 LOG_PATTERN 가져다 사용하기 -->
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>
    </appender>
 
 <!-- 파일에 로그를 남기는 것 --> 
     <!-- File Appender -->
    <appender name="FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
       
       <!-- 파일경로 설정 -->
        <file>${LOG_PATH}/${LOG_FILE_NAME}.log</file>
        
        <!-- 출력패턴 설정-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${LOG_PATTERN}</pattern>
        </encoder>

        <!-- Rolling 정책 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
        
            <!-- 로그 파일을 압축 하고싶다면 .log 대신 .zip이나 .gz을 끝에 붙이면 된다 -->
            <fileNamePattern>${LOG_PATH}/${LOG_FILE_NAME}.%d{yyyy-MM-dd}_%i.zip</fileNamePattern>
            
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
            <!-- 파일당 최대 용량 kb, mb, gb -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            
            <!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거-->
            <maxHistory>30</maxHistory>
            
            <!--10개가 넘어가면 오래된순으로 덮어쓰여진다-->
            <MinIndex>1</MinIndex>
            <MaxIndex>10</MaxIndex>
        
        </rollingPolicy>
    </appender>
 <!-- 여기서 ROLLING 정책은 파일로 로그를 저장하게 될 경우 그 용량이 계속 늘어나기 때문에 적용하는 정책으로

압축할 것인지, 파일당 최대 용량이 몇인지, 몇일 후에 로그를 지울 것인지 설정할 수 있다.

10MB단위로 로그 압축 파일이 생성되고 Index에 설정한대로 (1 ~ 10)

10개가 넘어가면 오래된순으로 덮어쓰여진다. 

즉, 하루에 생길 수 있는 로그는 무조건 10mb이며 이를 초과하게 되면 오래된 로그부터 없어지는 것.

추가로 저장된지 30일 이 지난 로그는  자동 제거되는 것이다. -->

<!-- application.properties파일의 로그레벨값을 source 속성으로 읽어오기(윗부분 LOG_LEVEL 변수 정의 참조) -->

<!-- root레벨 설정 -->
    <root level="${LOG_LEVEL}">
        <appender-ref ref="CONSOLE"/>
        <appender-ref ref="FILE"/>
        <appender-ref ref="ERROR"/>
    </root>

<!-- 참고로  CASE 별 컴파일 순서는 다음과 같다.

1) resources밑에 logback-spring.xml파일이 있으면

=> logback-spring.xml 파일 적용

 

2) resources밑에 logback-spring.xml파일이 없으면

=> .yml(.properties) 파일 적용

 

3) logback-spring.xml 파일과 .yml(.properties)파일 둘다 있으면

=>.yml(.properties) 파일을 먼저 적용 후 logback-spring.xml 파일 적용. -->

<!-- log4jdbc-log4j2 -->
<logger name="jdbc.sqlonly" level="INFO"/>
<logger name="jdbc.sqltiming" level="INFO"/>
<logger name="jdbc.audit" level="WARN"/>
<logger name="jdbc.resultset" level="INFO"/>
<logger name="jdbc.resultsettable" level="INFO"/>
<logger name="jdbc.connection" level="INFO"/>


</configuration>