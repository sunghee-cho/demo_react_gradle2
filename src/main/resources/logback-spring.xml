<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE configuration>
<configuration>

<!-- 
참고로  CASE 별 컴파일 순서는 다음과 같다.

1) resources밑에 logback-spring.xml파일이 있으면
=> logback-spring.xml 파일 적용

2) resources밑에 logback-spring.xml파일이 없으면
=> .yml(.properties) 파일 적용

3) logback-spring.xml 파일과 .yml(.properties)파일 둘다 있으면
=>.yml(.properties) 파일을 먼저 적용 후 logback-spring.xml 파일 적용. 
-->



    <!-- 로그의 저장 위치 -->
    <property name="LOGS" value="logs" />

    <!-- appender-> 출력 위치, CONSOLE 표기 패턴(색상포함)-->
    <appender name="Console"
              class="ch.qos.logback.core.ConsoleAppender">
        <layout class="ch.qos.logback.classic.PatternLayout">
        <!-- 하단 참고1 -->
            <Pattern>
                %yellow(%d{ISO8601}) %highlight(%-5level) [%blue(%t)] %magenta(%C{1}): %msg%n%throwable  
            </Pattern>
        </layout>
    </appender>

    <!-- 현재 롤링파일 표기 및 아카이브 로깅 규칙 정의 -->
    <appender name="RollingFile"
              class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${LOGS}/now-logFile.log</file><!-- 현재로그기록파일. 1시간뒤에는 아래 rollingPolicy 정의한 파일명으로 변경. 1시간내에 10mb 넘으면 뒤에 인덱스증가시켜 파일명으로 생성 -->
        <encoder
                class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <Pattern>%d %p %C{1} [%t] %m%n</Pattern>
        </encoder>

        <rollingPolicy
                class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 분당 로그 파일을 만들고, 10MB 단위로 운영 -->
            <!-- %d -> dateTime, %i -> index 둘은 필수 -->
            <fileNamePattern>${LOGS}/logFile.%d{yyyy-MM-dd_HH}.%i.log
            </fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy
                    class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
    </appender>

    <!--전역 로깅 설정 ROOT 부터 하위로 내려감, additivity-> 상속여부-->
    <!-- application.properties 파일에 정의된  logging.level.root 값을 LOG_LEVEL 변수에 저장-->
     <springProperty scope="context" name="LOG_LEVEL" source="logging.level.root"/>
    <!-- application.properties 파일에 정의된  logging.level.root 값 사용 -->
    <root level="${LOG_LEVEL}">
        <appender-ref ref="Console"/>
        <appender-ref ref="RollingFile"/>
    </root>
    
    <logger name="com.spring.jpa" level="trace" additivity="false">
        <appender-ref ref="RollingFile" />
        <appender-ref ref="Console" />
    </logger>


    <!--데이터 베이스 관련 로깅 설정-->

    <!--SQL 보이게 하기-->
    <logger name="org.hibernate.SQL" level="DEBUG">
        <appender-ref ref="RollingFile" />
        <appender-ref ref="Console" />
    </logger>

    <!--SQL에 들어가는 파라미터 보이게 하기-->
    <logger name="org.hibernate.type.descriptor.sql.BasicBinder" level="TRACE">
        <appender-ref ref="RollingFile" />
        <appender-ref ref="Console" />
    </logger>

    <!--DB 커넥션 표시(선택)-->
    <logger name="com.zaxxer.hikari" level="DEBUG">
        <!--<appender-ref ref="RollingFile" />-->
        <!--<appender-ref ref="Console" />-->
    </logger>

</configuration>

<!--참고1 :
  %-5level : 로그 레벨, -5는 출력의 고정폭 값(5글자)
%msg : - 로그 메시지 (=%message)
${PID:-} : 프로세스 아이디
%d : 로그 기록시간
%p : 로깅 레벨
%F : 로깅이 발생한 프로그램 파일명
%M : 로깅일 발생한 메소드의 명
%l : 로깅이 발생한 호출지의 정보
%L : 로깅이 발생한 호출지의 라인 수
%thread : 현재 Thread 명
%t : 로깅이 발생한 Thread 명
%c : 로깅이 발생한 카테고리
%C : 로깅이 발생한 클래스 명
%m : 로그 메시지
%n : 줄바꿈(new line)
%% : %를 출력
%r : 애플리케이션 시작 이후부터 로깅이 발생한 시점까지의 시간(ms) -->    